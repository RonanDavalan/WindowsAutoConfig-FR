[SystemConfig]
; Ce fichier de configuration permet de piloter le comportement du système ConfigSystemeAuto.
; Les paramètres les plus importants à vérifier avant l'installation sont "AutoLoginUsername" (ici) et "ProcessName" (plus bas).
;-------------------------------------------------------------------------------------------------------------------------------------

$ScriptVersion = "Systeme v1.68"
$ScriptVersionSuffix = $ScriptVersion.Split(' ')[1]

; Nom de l'utilisateur pour l'autologon.
; OPTION 1 (Recommandé si l'autologon existe déjà) : Laissez cette ligne vide. Le script détectera automatiquement l'utilisateur configuré dans Windows.
; OPTION 2 (Recommandé pour une nouvelle installation) : Renseignez le nom de l'utilisateur pour être sûr.
; IMPORTANT : Vous ne pouvez PAS utiliser de variables comme %USERNAME% ici. Le nom doit être littéral.
AutoLoginUsername=

DisableFastStartup=true
; true: Désactive le Démarrage Rapide de Windows (HiberbootEnabled=0) pour plus de stabilité au démarrage.
; false: Laisse le Démarrage Rapide géré par Windows (peut le réactiver si désactivé manuellement ailleurs).
; Laisser vide ou commenter pour ne pas gérer ce paramètre via le script.

; --- Comportement au démarrage et alimentation ---
DisableSleep=true
; true: Désactive la mise en veille de la machine (veille S3/S4) / false: Comportement par défaut

DisableScreenSleep=false
; true: Désactive la mise en veille de l'écran (l'écran ne s'éteint pas) / false: Comportement par défaut

; Autologon.exe est le maître pour le mot de passe. Le script peut vérifier/journaliser ou désactiver si EnableAutoLogin=false.
EnableAutoLogin=true
; true: Le script s'assure que AutoAdminLogon est à 1.
; false: Le script mettra AutoAdminLogon à 0 pour désactiver l'auto-login.
; Attention : la configuration sera prise en compte au redémarrage suivant uniquement si config_systeme.ps1 est exécuté depuis un PowerShell avec les droits d’administrateur. Sinon, la modification sera appliquée au deuxième redémarrage.
; Si le script n’est pas exécuté en tant qu’administrateur, certaines clés de registre ne sont pas accessibles, ce qui retarde la prise en compte de la configuration.
; Pour exécuter le script : cd C:\AllSysConfig\ConfigSystemeAutoPS puis .\config_systeme.ps1

; --- Mises à jour et redémarrages système ---
DisableWindowsUpdate=true
; true: Désactive les MAJ Windows / false: Active les MAJ Windows
DisableAutoReboot=true
; true: Empêche Windows Update de redémarrer auto si des utilisateurs sont connectés

; -- Action préparatoire avant redémarrage planifié --
PreRebootActionTime=03:55
;PreRebootActionCommand="%USERPROFILE%\Desktop\TestMessagePreReboot.bat"
;PreRebootActionCommand="C:\Users\Clkeriolet\Desktop\Allv023-05\WindowsAutoConfig_v164-en_2025-06-25\management\TestMessagePreReboot.bat"
;PreRebootActionCommand="%USERPROFILE%\Desktop\Allv023-05\WindowsAutoConfig_v165-en_2025-06-26\management\PreReboot.bat"
PreRebootActionCommand="PreReboot.bat"

; ou .bat, ou .exe
PreRebootActionArguments=
; -Mode Sauvegarde -Verbose
; ou /backup /quiet pour un .exe
; Laisser vide si aucun argument.

PreRebootActionLaunchMethod=cmd

ScheduledRebootTime=04:00
; HH:MM pour un redémarrage quotidien planifié, effacer HH:MM pour desactiver

; --- Applications et Services ---
DisableOneDrive=true
; true: Désactive OneDrive via politique système / false: Autorise OneDrive

[Logging]
; Configuration de la rotation des logs
EnableLogRotation=true
; true: Active la rotation des logs / false: Désactive la rotation (un seul fichier log qui grossit)

MaxSystemLogsToKeep=7
; Nombre maximum de fichiers logs à conserver pour config_systeme.ps1 (inclut le log actuel + archives)
; Exemple: 7 signifie le log actuel + 6 archives (.1.txt à .6.txt)
; Mettre à 1 pour ne garder que le log actuel sans archives (écrasé à chaque fois après archivage unique)

MaxUserLogsToKeep=7
; Nombre maximum de fichiers logs à conserver pour config_utilisateur.ps1

[Process]
; --- Configuration du Processus Principal à Gérer ---

; ProcessName: Chemin complet vers l'exécutable ou le script à lancer.
; - Utilisez %USERPROFILE% pour un chemin relatif au profil de l'utilisateur courant (ex: le bureau).
;   Exemple: %USERPROFILE%\Desktop\MonApp\App.exe
; - Peut aussi être une commande si LaunchMethod est 'powershell' ou 'cmd' (ex: un nom de script sans chemin).
; ProcessName="E:\Bureau\Allv023-05\Allv023-05.exe"
ProcessName=
; ProcessArguments: Arguments à passer à l'exécutable ou au script défini dans ProcessName.
; - Laisser vide si aucun argument n'est requis.
; - La manière dont ces arguments sont interprétés dépend de la valeur de 'LaunchMethod'.
; Exemple pour Allv023-05.exe si lancé via 'cmd' et attendant 'tb', '00', 'W' comme arguments séparés:
;ProcessArguments=tb 00 W
ProcessArguments=
;Exemple pour un script PowerShell attendant des paramètres nommés :
; ProcessArguments=-Parametre1 "Valeur avec espaces" -SwitchParam
; Exemple pour une application attendant une chaîne JSON unique (LaunchMethod=direct ou l'application parse elle-même) :
; ProcessArguments={"user_id": 123, "action": "load_data"}

; LaunchMethod: Spécifie comment la commande (ProcessName + ProcessArguments) doit être exécutée.
; Options valides :
;   direct      : (Défaut si cette clé est absente ou vide)
;                 Lance directement l'exécutable ProcessName.
;                 PowerShell (via Start-Process) tentera de parser ProcessArguments en arguments distincts.
;                 Ex: ProcessName=App.exe, ProcessArguments=arg1 arg2 -> App.exe reçoit arg1, arg2.
;
;   powershell  : Lance la commande via une nouvelle instance de powershell.exe.
;                 Utile pour exécuter des scripts .ps1 ou des commandes PowerShell complexes.
;                 La commande construite sera : powershell.exe -NoProfile -Command "& \"ProcessName\" ProcessArguments"
;                 Ex: ProcessName=MonScript.ps1, ProcessArguments=-P1 val1 -> powershell.exe -Command "& \"MonScript.ps1\" -P1 val1"
;
;   cmd         : Lance la commande via l'interpréteur de commandes cmd.exe.
;                 Utile si l'application s'attend à être lancée depuis un contexte CMD ou nécessite son parsing d'arguments.
;                 La commande construite sera : cmd.exe /c "\"ProcessName\" ProcessArguments"
;                 Ex: ProcessName=App.exe, ProcessArguments=arg1 arg2 -> cmd.exe /c "\"App.exe\" arg1 arg2"
LaunchMethod=cmd

; CONFIGURATION AVANCÉ OPTIONNELLE
;---------------------------------

[Gotify]
; Notifications via Gotify
EnableGotify=false
Url=
Token=
Priority=1

; Titres pour la notification du script SYSTEME
GotifyTitleSuccessSystem=%COMPUTERNAME% Systeme
GotifyTitleErrorSystem=ERREUR Configuration Systeme sur %COMPUTERNAME%

; Titres pour la notification du script UTILISATEUR
GotifyTitleSuccessUser=%COMPUTERNAME% %USERNAME%
GotifyTitleErrorUser=ERREUR Configuration Utilisateur %USERNAME% sur %COMPUTERNAME%
